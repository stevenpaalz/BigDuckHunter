{"version":3,"file":"main.js","mappings":"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","sources":["webpack://bigduckhunter/./src/scripts/helpers.js","webpack://bigduckhunter/./src/scripts/flying_objects.js","webpack://bigduckhunter/./src/scripts/ducks.js","webpack://bigduckhunter/./src/scripts/sparrows.js","webpack://bigduckhunter/./src/scripts/owls.js","webpack://bigduckhunter/./src/scripts/vultures.js","webpack://bigduckhunter/./src/scripts/geese.js","webpack://bigduckhunter/./src/scripts/other_birds.js","webpack://bigduckhunter/./src/scripts/trees.js","webpack://bigduckhunter/./src/scripts/tree_1.js","webpack://bigduckhunter/./src/scripts/tree_2.js","webpack://bigduckhunter/./src/scripts/game.js","webpack://bigduckhunter/./src/scripts/crosshair.js","webpack://bigduckhunter/./src/scripts/shot.js","webpack://bigduckhunter/./src/scripts/twoplayer_game.js","webpack://bigduckhunter/./src/scripts/audio_player.js","webpack://bigduckhunter/./src/index.js"],"sourcesContent":["export function getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min;\n}\n\nexport function getVelHor(difficulty) {\n    let speedInt = 0;\n    switch(difficulty) {\n        case \"Easy\":\n            speedInt = 1;\n            break;\n        case \"Medium\":\n            speedInt = 2;\n            break;\n        case \"Hard\":\n            speedInt = 4;\n            break;\n    }\n    let vel = getRndInteger(-speedInt, speedInt + 1);\n    while (vel === 0) {\n        vel = getRndInteger(-speedInt, speedInt + 1);\n    }\n    return vel;\n}\n\nexport function getVelVert (difficulty) {\n    let speedInt = 0;\n    switch(difficulty) {\n        case \"Easy\":\n            speedInt = 1;\n            break;\n        case \"Medium\":\n            speedInt = 2;\n            break;\n        case \"Hard\":\n            speedInt = 3;\n            break;\n    }\n\n    let vel = getRndInteger(-speedInt, speedInt + 1);\n    while (vel === 0) {\n        vel = getRndInteger(-speedInt, speedInt + 1);\n    }\n    return vel;\n}\n\nexport function detectCollision(circ, rect) {\n    let distX = Math.abs(circ.x - rect.x - (rect.width/2));\n    let distY = Math.abs(circ.y - rect.y - (rect.height/2));\n    if (distX > (rect.w / 2 + circ.r)) {\n        return false;\n    }\n    if (distY > (rect.height / 2 + circ.radius)) {\n        return false;\n    }\n\n    if (distX <= (rect.width / 2) && distY <= (rect.height / 2)) {\n        return true;\n    }\n\n    var dx = distX - rect.width / 2;\n    var dy = distY - rect.height / 2;\n    return (dx * dx + dy * dy <= (circ.radius * circ.radius));\n}\n\nexport function detectCollisionCircles(circ1, circ2) {\n    let distX = Math.abs(circ1.x - circ2.x);\n    let distY = Math.abs(circ1.y - circ2.y)\n    let largerCirc = {}\n    if (circ1.radius > circ2.radius) {\n        largerCirc = circ1;\n    } else {\n        largerCirc = circ2;\n    }\n\n    return (distX * distX + distY * distY <= (largerCirc.radius * largerCirc.radius));\n}","import {getRndInteger, getVelHor, getVelVert} from \"./helpers\";\n\nclass FlyingObject {\n    constructor(difficulty, game) {\n        this.width = 90;\n        this.height = 60;\n        this.sx = getRndInteger(0, 3) * 450;\n        this.sy = getRndInteger(0, 3) * 300;\n        this.sWidth = 450;\n        this.sHeight = 300;\n        this.x = getRndInteger((-this.width/2), canvas.width);\n        this.y = getRndInteger((-this.height/2), canvas.height);\n        this.dx = getVelHor(difficulty);\n        this.dy = getVelVert(difficulty);\n        this.game = game;\n        this.hitbox = {\n            x: this.x + (this.width / 6),\n            y: this.y + (this.height / 6),\n            width: this.width - (this.width / 3),\n            height: this.height - (this.height / 3)\n        }\n        this.img = new Image();\n    }\n\n    static allFlyingObjects = [];\n    static frames = 0;\n\n    draw() {\n        const ctx = canvas.getContext(\"2d\");\n        if (this.dx > 0) {this.img.src = this.regImgSrc}\n        else {this.img.src = this.reverseImgSrc}\n        ctx.drawImage(this.img, this.sx, this.sy, this.sWidth, this.sHeight, this.x, this.y, this.width, this.height);\n        \n        if (this.x - this.width > canvas.width || this.x + this.width < 0) {\n            this.dx = -this.dx;\n        }\n        if (this.y - this.height > canvas.height || this.y + this.height < 0) {\n            this.dy = -this.dy;\n        }\n    }\n\n    update() {\n        this.x += this.dx;\n        this.y += this.dy;\n        this.hitbox.x = this.x + (this.width / 6);\n        this.hitbox.y = this.y + (this.height / 6);\n        if (this.game.frames % 6 === 0) {this.updateFlaps();}\n        if (getRndInteger(0,100) === 0) {this.switchDirection();}\n        this.draw();\n    }\n\n    updateFlaps() {\n        if (this.sy === 600 && this.sx === 450) {\n            this.sx = 0;\n            this.sy = 0;\n        } \n        else {\n            if (this.sx > 450) {\n                this.sx = 0;\n                this.sy += 300;\n            } else { this.sx += 450;}\n        }\n    }\n\n    switchDirection() {\n        this.dx = getVelHor(this.game.difficulty);\n        this.dy = getVelVert(this.game.difficulty);\n    }\n}\n\nexport default FlyingObject;","import FlyingObject from \"./flying_objects\";\nimport { getRndInteger } from \"./helpers\";\n\nclass Duck extends FlyingObject {\n    constructor(difficulty, game) {\n        super(difficulty, game);\n        this.regImgSrc = \"../BigDuckHunter/assets/ducks.png\";\n        this.reverseImgSrc = \"../BigDuckHunter/assets/ducks_reverse.png\";\n    }\n\n    static generateDucks(difficulty, game) {\n        let ducks = []\n        let numDucks = 15;\n        switch(difficulty) {\n            case \"Medium\":\n                numDucks = 10;\n                break;\n            case \"Hard\":\n                numDucks = 5;\n                break;\n        }\n        for (let i = 0; i < numDucks; i ++) {\n            ducks.push(new Duck(difficulty, game))\n        }\n        return ducks;\n    }\n\n    static respawn(difficulty, game) {\n        let newDuck = new Duck(difficulty, game);\n        let i = getRndInteger(0, 2)\n        if (i===0) {newDuck.x = (-newDuck.width/2)}\n        else {newDuck.x = canvas.width}\n        return newDuck;\n    }\n}\n\nexport default Duck;","import FlyingObject from \"./flying_objects\";\n\nclass Sparrow extends FlyingObject {\n    constructor(difficulty, game) {\n        super(difficulty, game);\n        this.regImgSrc = \"../BigDuckHunter/assets/sparrows.png\";\n        this.reverseImgSrc = \"../BigDuckHunter/assets/sparrows_reverse.png\";\n    }\n\n    static sparrows = [];\n\n    static generateSparrows(difficulty, game) {\n        this.sparrows = [];\n        let numSparrows = 3;\n        switch(difficulty) {\n            case \"Medium\":\n                numSparrows = 5;\n                break;\n            case \"Hard\":\n                numSparrows = 8;\n                break;\n        }\n        for (let i = 0; i < numSparrows; i ++) {\n            this.sparrows.push(new Sparrow(difficulty, game))\n        }\n        return this.sparrows;\n    }\n\n}\n\nexport default Sparrow;","import FlyingObject from \"./flying_objects\";\n\nclass Owl extends FlyingObject {\n    constructor(difficulty, game) {\n        super(difficulty, game);\n        this.regImgSrc = \"../BigDuckHunter/assets/owls.png\";\n        this.reverseImgSrc = \"../BigDuckHunter/assets/owls_reverse.png\";\n    }\n\n    static owls = [];\n\n    static generateOwls(difficulty, game) {\n        this.owls = [];\n        let numOwls = 3;\n        switch(difficulty) {\n            case \"Medium\":\n                numOwls = 5;\n                break;\n            case \"Hard\":\n                numOwls = 8;\n                break;\n        }\n        for (let i = 0; i < numOwls; i ++) {\n            this.owls.push(new Owl(difficulty, game))\n        }\n        return this.owls;\n    }\n\n}\n\nexport default Owl;","import FlyingObject from \"./flying_objects\";\n\nclass Vulture extends FlyingObject {\n    constructor(difficulty, game) {\n        super(difficulty, game);\n        this.regImgSrc = \"../BigDuckHunter/assets/vultures.png\";\n        this.reverseImgSrc = \"../BigDuckHunter/assets/vultures_reverse.png\";\n    }\n\n    static vultures = [];\n\n    static generateVultures(difficulty, game) {\n        this.vultures = [];\n        let numVultures = 3;\n        switch(difficulty) {\n            case \"Medium\":\n                numVultures = 5;\n                break;\n            case \"Hard\":\n                numVultures = 8;\n                break;\n        }\n        for (let i = 0; i < numVultures; i ++) {\n            this.vultures.push(new Vulture(difficulty, game))\n        }\n        return this.vultures;\n    }\n\n}\n\nexport default Vulture;","import FlyingObject from \"./flying_objects\";\n\nclass Goose extends FlyingObject {\n    constructor(difficulty, game) {\n        super(difficulty, game);\n        this.regImgSrc = \"../BigDuckHunter/assets/geese.png\";\n        this.reverseImgSrc = \"../BigDuckHunter/assets/geese_reverse.png\";\n    }\n\n    static geese = [];\n\n    static generateGeese(difficulty, game) {\n        this.geese = [];\n        let numGeese = 3;\n        switch(difficulty) {\n            case \"Medium\":\n                numGeese = 5;\n                break;\n            case \"Hard\":\n                numGeese = 8;\n                break;\n        }\n        for (let i = 0; i < numGeese; i ++) {\n            this.geese.push(new Goose(difficulty, game))\n        }\n        return this.geese;\n    }\n\n}\n\nexport default Goose;","import Sparrow from \"./sparrows\"\nimport Owl from \"./owls\"\nimport Vulture from \"./vultures\"\nimport Goose from \"./geese\"\n\nclass OtherBird {\n\n    // static otherBirds = [];\n\n    static generateOtherBirds(difficulty, game) {\n        let otherBirds = [];\n        return otherBirds.concat(Sparrow.generateSparrows(difficulty, game), Owl.generateOwls(difficulty, game), Vulture.generateVultures(difficulty, game), Goose.generateGeese(difficulty, game));\n    }\n}\n\nexport default OtherBird;","import Tree1 from \"./tree_1\";\nimport Tree2 from \"./tree_2\";\n\nclass Tree {\n    static generateTrees() {\n        let trees = [];\n        trees.push(new Tree1());\n        trees.push(new Tree2());\n        return trees;\n    }\n}\n\nexport default Tree;","class Tree1 {\n    constructor() {\n        this.img = new Image();\n        this.img.src = \"../BigDuckHunter/assets/tree_1.png\";\n        this.x = 740;\n        this.y = 100;\n        this.width = 411 / 1.6;\n        this.height = 771 / 1.6;\n        this.hitbox1 = {\n            x: 847,\n            y: 180,\n            width: this.width / 5,\n            height: this.height * 0.2\n        }\n        this.hitbox2 = {\n            x: 825,\n            y: 270,\n            width: this.width * 0.35,\n            height: this.height * 0.2\n        }\n        this.hitbox3 = {\n            x: 810,\n            y: 345,\n            width: this.width * 0.5,\n            height: this.height * 0.25\n        }\n        this.hitbox4 = {\n            x: 792,\n            y: 430,\n            width: this.width * 0.65,\n            height: this.height * 0.15\n        }\n    }\n\n    draw() {\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(this.img, this.x, this.y, this.width, this.height);\n    }\n}\n\nexport default Tree1;","class Tree2 {\n    constructor() {\n        this.img = new Image();\n        this.img.src = \"../BigDuckHunter/assets/tree_2.png\";\n        this.x = -100;\n        this.y = 165;\n        this.width = 460 / 1.3;\n        this.height = 539 / 1.3;\n        this.hitbox = {\n            x: 80,\n            y: 302,\n            radius: 105,\n            sAngle: 0,\n            eAngle: (2 * Math.PI)\n        }\n    }\n\n    draw() {\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(this.img, this.x, this.y, this.width, this.height);\n        // ctx.arc(this.hitbox.x, this.hitbox.y, this.hitbox.radius, this.hitbox.sAngle, this.hitbox.eAngle);\n        // ctx.fill();\n    }\n}\n\nexport default Tree2;","import Duck from \"./ducks\";\nimport Shot from \"./shot\";\nimport OtherBird from \"./other_birds\";\nimport Tree from \"./trees\"\nimport Crosshair from \"./crosshair\";\n\nclass Game {\n    constructor(difficulty) {\n        this.difficulty = difficulty;\n        this.time = 30;\n        this.score = 0;\n        this.ducks = [];\n        this.otherBirds = [];\n        this.trees = [];\n        this.gameLost = false;\n        this.crosshair = {};\n        this.frames = 0;\n        this.currentShots = [];\n        this.leftPressed = false;\n        this.rightPressed = false;\n        this.upPressed = false;\n        this.downPressed = false;\n    }\n\n    animate() {\n        if (this.checkGameOver()) {return true;}\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.frames += 1;\n        for (let i = 0; i < this.ducks.length; i++) {\n            this.ducks[i].update();\n        }\n        for (let i = 0; i < this.otherBirds.length; i++) {\n            this.otherBirds[i].update();\n        }\n        for (let i = 0; i < this.trees.length; i++) {\n            this.trees[i].draw();\n        }\n        this.crosshair.move();\n        this.drawShots();\n        const scoreDisplay = document.getElementById(\"score-display\");\n        scoreDisplay.innerText = this.score.toLocaleString('en-US', {\n            minimumIntegerDigits: 2\n          });\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    run() {\n        this.ticker = setInterval(this.tick.bind(this), 1000);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.crosshair = new Crosshair(this);\n        this.crosshair.changeColor();\n        const difficultyDisplay = document.getElementById(\"difficulty-display\");\n        difficultyDisplay.innerText = `${this.difficulty}`;\n        this.ducks = Duck.generateDucks(this.difficulty, this);\n        this.otherBirds = OtherBird.generateOtherBirds(this.difficulty, this);\n        this.trees = Tree.generateTrees();\n        document.addEventListener(\"keydown\", this.keyDownHandler);\n        document.addEventListener(\"keyup\", this.keyUpHandler);\n        this.animate();\n    }\n\n\n    checkGameOver() {\n        if (this.time < 0) {\n            if (!this.gameLost) {\n                if (this.currentPlayer === \"playerOne\") {\n                    this.currentPlayer = \"playerTwo\";\n                    this.queueNextTurn();\n                } else {\n                    this.gameOver();\n                }\n                return true;\n            } else {\n                if (this.currentPlayer === \"playerOne\") {\n                    this.currentPlayer = \"playerTwo\";\n                    this.queueNextTurn();}\n                else if (this.currentPlayer === \"playerTwo\") {\n                    this.gameOver();\n                }\n                return true;\n            }\n        }\n    }\n\n    tick() {\n        const timeDisplay = document.getElementById(\"time-display\")\n        if (this.time > 0) {\n            timeDisplay.innerText = this.time.toLocaleString('en-US', {\n                minimumIntegerDigits: 2\n            });\n        } else {\n            timeDisplay.innerText = (0).toLocaleString('en-US', {\n                minimumIntegerDigits: 2\n            });\n        }\n        if (this.time >= 0) {\n            this.time -= 1;\n        } else {\n            clearInterval(this.ticker);\n        }\n    }\n\n    loseGame() {\n        this.time = 0;\n        const lostGame = document.getElementById(\"lost-game\");\n        const gameInitializer = document.getElementById(\"game-initializer\");\n        gameInitializer.classList.remove(\"hidden\");\n        lostGame.classList.remove(\"hidden\");\n    }\n\n    changeGameLost() {\n        this.gameLost = true;\n    }\n\n    gameOver() {\n        const finalScoreMessage = document.getElementById(\"final-score-message\");\n        const wonGame = document.getElementById(\"won-game\");\n        const gameInitializer = document.getElementById(\"game-initializer\");\n        finalScoreMessage.innerText = `Final Score: ${this.score}`;\n        gameInitializer.classList.remove(\"hidden\");\n        wonGame.classList.remove(\"hidden\");\n        return true;\n    }\n\n    scorePoint() {\n        this.score += 1;\n    }\n\n    drawShots() {\n        const ctx = canvas.getContext(\"2d\");\n        this.currentShots.forEach((shot) => {\n            shot.framesRemaining -= 1;\n            if (shot.framesRemaining < 1) {\n                this.currentShots.shift();\n            } else {\n                ctx.globalAlpha = shot.framesRemaining / 20;\n                ctx.drawImage(shot.shotImg, shot.x, shot.y, shot.width, shot.height);\n                ctx.globalAlpha = 1;\n            }\n        })\n    }\n\n    keyDownHandler(event) {\n        if ([37, 38, 39, 40, 32, 65, 68, 83, 87].includes(event.keyCode)) {event.preventDefault();}\n        switch (event.keyCode) {\n            case 37:\n                game.leftPressed = true;\n                break;\n            case 65:\n                game.leftPressed = true;\n                break;\n            case 39:\n                game.rightPressed = true;\n                break;\n            case 68:\n                game.rightPressed = true;\n                break;     \n            case 38:\n                game.upPressed = true;\n                break;\n            case 87:\n                game.upPressed = true;\n                break;\n            case 40:\n                game.downPressed = true;\n                break;\n            case 83:\n                game.downPressed = true;\n                break;\n            case 32:\n                game.fireShot();\n                break;\n        }\n    }\n\n    keyUpHandler(event) {\n        event.preventDefault();\n        switch (event.keyCode) {\n            case 37:\n                game.leftPressed = false;\n                break;\n            case 65:\n                game.leftPressed = false;\n                break;\n            case 39:\n                game.rightPressed = false;\n                break;\n            case 68:\n                game.rightPressed = false;\n                break; \n            case 38:\n                game.upPressed = false;\n                break;\n            case 87:\n                game.upPressed = false;\n                break;\n            case 40:\n                game.downPressed = false;\n                break;\n            case 83:\n                game.downPressed = false;\n                break;\n        }\n    }\n\n    fireShot() {\n        let shot = new Shot(this.crosshair.x, this.crosshair.y, this.crosshair.width, this.crosshair.height, this);\n        shot.fire();\n    }\n}\n\nexport default Game;","import Shot from \"./shot\"\n\nclass Crosshair {\n    constructor(game) {\n        this.img = new Image();\n        this.img.src = \"../BigDuckHunter/assets/crosshair.png\";\n        this.normalImg = \"../BigDuckHunter/assets/crosshair.png\";\n        this.altImg = \"../BigDuckHunter/assets/crosshair_orange.png\";\n        this.width = 50;\n        this.height = 50;\n        this.x = (canvas.width / 2) - (this.width / 2);\n        this.y = (canvas.height / 2) - (this.height / 2);\n        this.game = game;\n    }\n\n    draw() {\n        const ctx = canvas.getContext(\"2d\");\n        if (this.x + (this.width / 2) > canvas.width) {\n            this.x = canvas.width - (this.width / 2);\n        }\n        if (this.x + (this.width / 2) < 0) {\n            this.x = -(this.width / 2);\n        }\n        if (this.y + (this.height / 2) > canvas.height) {\n            this.y = canvas.height - (this.height / 2);\n        }\n        if (this.y + (this.height / 2) < 0) {\n            this.y = -(this.height / 2);\n        }\n        ctx.drawImage(this.img, this.x, this.y, this.width, this.height);\n    }\n\n    move() {\n        if (this.game.leftPressed) {\n            this.x -= 5;\n        }\n        if (this.game.rightPressed) {\n            this.x += 5;\n        }\n        if (this.game.upPressed) {\n            this.y -= 5;\n        }\n        if (this.game.downPressed) {\n            this.y += 5;\n        }\n        this.draw();\n    }\n\n    changeColor() {\n        if (!this.game.currentPlayer || this.game.currentPlayer === \"playerOne\") {\n            this.img.src = this.normalImg;\n        }\n        else {\n            this.img.src = this.altImg;\n        }\n    }\n}\n\nexport default Crosshair;","import Duck from \"./ducks\";\nimport { detectCollision, detectCollisionCircles } from \"./helpers\";\n\nclass Shot {\n    constructor(x, y, width, height, game) {\n        this.x = x,\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.game = game;\n        this.framesRemaining = 0;\n        this.shotImg = new Image();\n        this.shotImg.src = \"../BigDuckHunter/assets/explosion.png\";\n        this.hitbox = {\n            x: this.x + 25,\n            y: this.y + 25,\n            radius: 18,\n            sAngle: 0,\n            eAngle: (2 * Math.PI)\n        }\n    }\n\n\n    fire() {\n        this.framesRemaining = 20;\n        const sound = document.getElementById('sound');\n        if (sound.dataset.muted === \"false\") {\n            const gunSound = new Audio();\n            gunSound.src = \"../BigDuckHunter/assets/gun_shot.mp3\";\n            gunSound.play();\n        }\n        this.game.currentShots.push(this);\n        if (!this.treeCollisions()) {\n            this.otherBirdCollisions();\n            if (!this.game.gameLost) {\n                this.duckCollisions();\n            }\n        }\n    }\n\n    treeCollisions() {\n        if (this.x) {\n            if (detectCollision(this.hitbox, this.game.trees[0].hitbox1)) {return true;}\n            if (detectCollision(this.hitbox, this.game.trees[0].hitbox2)) {return true;}\n            if (detectCollision(this.hitbox, this.game.trees[0].hitbox3)) {return true;}\n            if (detectCollision(this.hitbox, this.game.trees[0].hitbox4)) {return true;}\n            if (detectCollisionCircles(this.hitbox, this.game.trees[1].hitbox)) {return true;}\n            return false;\n        }\n    }\n\n    duckCollisions() {\n        let refreshedDucks = [];\n        for (let i = 0; i < this.game.ducks.length; i++) {\n            if (detectCollision(this.hitbox, this.game.ducks[i].hitbox)) {\n                const sound = document.getElementById('sound');\n                if (sound.dataset.muted === \"false\") {\n                    const duckSound = new Audio();\n                    duckSound.src = \"../BigDuckHunter/assets/duck_quack.mp3\";\n                    duckSound.play();\n                }\n                this.game.scorePoint();\n                refreshedDucks.push(Duck.respawn(this.game.difficulty, this.game))\n            } else {refreshedDucks.push(this.game.ducks[i])}\n        }\n        this.game.ducks = refreshedDucks;\n    }\n\n    otherBirdCollisions() {\n        for (let i = 0; i < this.game.otherBirds.length; i++) {\n            if (detectCollision(this.hitbox, this.game.otherBirds[i].hitbox)) {\n                this.game.changeGameLost();\n                return this.game.loseGame();\n            }\n        }\n    }\n}\n\nexport default Shot;","import Game from \"./game\"\n\nclass TwoPlayerGame extends Game {\n    constructor(difficulty) {\n        super(difficulty);\n        this.playerOneScore = 0;\n        this.playerTwoScore = 0;\n        this.currentPlayer = 'playerOne';\n    }\n\n    twoPlayerRun() {\n        this.toggleTurnInitializer();\n        const playerOneTurnStart = document.getElementById(\"player-one-turn-start\");\n        const playerOneStartButton = document.getElementById(\"player-one-turn-start-button\");\n        const currentPlayerDisplay = document.getElementById(\"current-player-display\");\n\n        playerOneTurnStart.classList.toggle(\"hidden\");\n        currentPlayerDisplay.innerText = \"Player One\";\n        let that = this;\n        playerOneStartButton.addEventListener(\"click\", (event)=>{\n            playerOneTurnStart.classList.toggle(\"hidden\");\n            that.firstPlayerRun();\n        }, {once: true})\n    }\n\n    firstPlayerRun() {\n        this.toggleTurnInitializer();\n        this.run();\n    }\n\n    secondPlayerRun() {\n        this.toggleTurnInitializer();\n        this.run();\n    }\n\n    toggleTurnInitializer() {\n        const turnInitializer = document.getElementById(\"turn-initializer\");\n        turnInitializer.classList.toggle(\"hidden\");\n    }\n\n    queueNextTurn() {\n        const playerTwoTurnStart = document.getElementById(\"player-two-turn-start\");\n        const playerTwoStartButton = document.getElementById(\"player-two-turn-start-button\");\n        const currentPlayerDisplay = document.getElementById(\"current-player-display\");\n        const playerOneScoreDisplay = document.getElementById(\"player-one-score-display\");\n        const playerOneUpdate = document.getElementById(\"player-one-update\");\n        const timeDisplay = document.getElementById(\"time-display\");\n        const scoreDisplay = document.getElementById(\"score-display\");\n        const difficultyDisplay = document.getElementById(\"difficulty-display\");\n        currentPlayerDisplay.innerText = \"Player Two\";\n        if (this.gameLost === true) {\n            this.playerOneScore = 0;\n            playerOneUpdate.innerText = \"Oh no! Player One shot the wrong bird\";\n        }\n        else {\n            this.playerOneScore = this.score;\n            playerOneUpdate.innerText = `Player One Score: ${this.playerOneScore}`;\n        }\n        playerOneScoreDisplay.innerText = `${this.playerOneScore}`\n        this.resetGameAttributes();\n        this.toggleTurnInitializer();\n        timeDisplay.classList.add(\"orange\");\n        timeDisplay.classList.remove(\"red\");\n        scoreDisplay.classList.add(\"orange\");\n        scoreDisplay.classList.remove(\"red\");\n        difficultyDisplay.classList.add(\"orange\");\n        difficultyDisplay.classList.remove(\"red\");\n        playerTwoTurnStart.classList.toggle(\"hidden\");\n        playerTwoStartButton.addEventListener(\"click\", (event)=>{\n            playerTwoTurnStart.classList.toggle(\"hidden\");\n            this.secondPlayerRun();\n        }, {once: true})\n    }\n\n    resetGameAttributes() {\n        clearInterval(this.ticker);\n        this.gameLost = false;\n        this.ducks = [];\n        this.score = 0;\n        this.trees = [];\n        this.otherBirds = []\n        this.crosshair = {};\n        this.time = 30;\n        this.frames = 0;\n        this.currentShots = [];\n    }\n\n    loseGame() {\n        this.time = 0;\n\n        if (this.currentPlayer === \"playerOne\") {\n            this.playerOneScore = 0;\n            const playerOneScoreDisplay = document.getElementById(\"player-one-score-display\");\n            playerOneScoreDisplay.innerText = `${this.playerOneScore}`\n        } else {\n            this.playerTwoScore = 0;\n            const playerTwoScoreDisplay = document.getElementById(\"player-two-score-display\");\n            playerTwoScoreDisplay.innerText = `${this.playerTwoScore}`\n        }\n    }\n\n    gameOver() {\n        const twoPlayerWinMessage = document.getElementById(\"two-player-win-message\");\n        const twoPlayerFinalScore = document.getElementById(\"two-player-final-score\");\n        const twoPlayerEndGame= document.getElementById(\"two-player-end-game\");\n        const playerTwoScoreDisplay = document.getElementById(\"player-two-score-display\");\n        if (this.gameLost === true) {this.playerTwoScore = 0;}\n        else {this.playerTwoScore = this.score;}\n        playerTwoScoreDisplay.innerText = `${this.playerTwoScore}`;\n        if (this.playerOneScore > this.playerTwoScore) {\n            twoPlayerWinMessage.innerText = \"Player One Wins!\";\n        }\n        else if (this.playerTwoScore > this.playerOneScore) {\n            twoPlayerWinMessage.innerText = \"Player Two Wins!\";\n        }\n        else {\n            twoPlayerWinMessage.innerText = \"It's a tie!\";\n        }\n        twoPlayerFinalScore.innerText = `Player One Score: ${this.playerOneScore}   Player Two Score: ${this.playerTwoScore}`;\n        const gameInitializer = document.getElementById(\"game-initializer\");\n        gameInitializer.classList.remove(\"hidden\");\n        twoPlayerEndGame.classList.remove(\"hidden\");\n    }\n}\n\nexport default TwoPlayerGame;\n\n\n// two player game flow\n// select two player\n// new screen appears \"Two player mode\" \"ready to hunt player one?\" \"Start Game!\"\n// game screen the same but \"Player 1\" in top left corner\n// other side of top bar says Player 1 Score: Player 2 Score: \n// game runs for player 1. At end of turn, score is saved to player 1 score and game score is reset to 0. Game now runs again.","export function toggleMute() {\n    const sound = document.getElementById('sound');\n    const audioImg = document.querySelector('#sound img');\n    if (sound.dataset.muted === \"true\") {\n        audioImg.src = \"../BigDuckHunter/assets/sound.png\";\n        sound.dataset.muted = \"false\";\n        unmutePage();\n    } else { \n        audioImg.src = \"../BigDuckHunter/assets/mute.png\";\n        sound.dataset.muted = \"true\";\n        mutePage();\n    }\n}\n\nfunction mutePage() {\n        let elems = document.querySelectorAll(\"audio\");\n        elems.forEach((elem)=>{\n            elem.muted = true;\n            elem.pause();\n        })\n}\n\nfunction unmutePage() {\n    let elems = document.querySelectorAll(\"audio\");\n    elems.forEach((elem)=>{\n        elem.muted = false;\n        elem.play();\n    })\n}\n\n","import Game from \"./scripts/game\";\nimport TwoPlayerGame from \"./scripts/twoplayer_game\";\nimport {toggleMute} from \"./scripts/audio_player\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    // const mode = \"singlePlayer\"\n\n    const gameInitializer = document.getElementById(\"game-initializer\");\n    const newGame = document.getElementById(\"new-game\");\n    const wonGame = document.getElementById(\"won-game\");\n    const lostGame = document.getElementById(\"lost-game\");\n    const twoPlayerEndGame = document.getElementById(\"two-player-end-game\");\n    const gameStartButton = document.getElementById(\"game-start-button\");\n    const singleModeDisplay = document.getElementById(\"single-mode-display\");\n    const versusModeDisplay = document.getElementById(\"versus-mode-display\");\n    const turnInitializer = document.getElementById(\"turn-initializer\");\n    const timeDisplay = document.getElementById(\"time-display\");\n    const scoreDisplay = document.getElementById(\"score-display\");\n    const difficultyDisplay = document.getElementById(\"difficulty-display\");\n    gameStartButton.addEventListener(\"click\", (event)=>{\n        timeDisplay.classList.remove(\"orange\");\n        timeDisplay.classList.add(\"red\");\n        scoreDisplay.classList.remove(\"orange\");\n        scoreDisplay.classList.add(\"red\");\n        difficultyDisplay.classList.remove(\"orange\");\n        difficultyDisplay.classList.add(\"red\");\n        let difficulty = document.querySelector('input[name=\"difficulty\"]:checked').value;\n        let mode = document.querySelector('input[name=\"mode\"]:checked').value;\n        gameInitializer.classList.add(\"hidden\");\n        newGame.classList.add('hidden');\n        wonGame.classList.add('hidden');\n        lostGame.classList.add('hidden');\n        twoPlayerEndGame.classList.add('hidden');\n        turnInitializer.classList.add(\"hidden\");\n        if (mode === \"twoPlayer\") {\n            singleModeDisplay.classList.add('hidden');\n            versusModeDisplay.classList.remove('hidden');\n            window.game = new TwoPlayerGame(difficulty);\n            game.twoPlayerRun();\n        } else {\n            versusModeDisplay.classList.add('hidden');\n            singleModeDisplay.classList.remove('hidden');\n            window.game = new Game(difficulty);\n            game.run();\n        }\n        \n    })\n\n    const sound = document.getElementById('sound');\n    sound.addEventListener(\"click\", toggleMute);\n\n});"],"names":["getRndInteger","min","max","Math","floor","random","getVelHor","difficulty","speedInt","vel","getVelVert","detectCollision","circ","rect","distX","abs","x","width","distY","y","height","w","r","radius","dx","dy","constructor","game","this","sx","sy","sWidth","sHeight","canvas","hitbox","img","Image","static","draw","ctx","getContext","src","regImgSrc","reverseImgSrc","drawImage","update","frames","updateFlaps","switchDirection","Duck","FlyingObject","super","ducks","numDucks","i","push","newDuck","Sparrow","sparrows","numSparrows","Owl","owls","numOwls","Vulture","vultures","numVultures","Goose","geese","numGeese","concat","trees","hitbox1","hitbox2","hitbox3","hitbox4","sAngle","eAngle","PI","time","score","otherBirds","gameLost","crosshair","currentShots","leftPressed","rightPressed","upPressed","downPressed","animate","checkGameOver","clearRect","length","move","drawShots","document","getElementById","innerText","toLocaleString","minimumIntegerDigits","requestAnimationFrame","bind","run","ticker","setInterval","tick","normalImg","altImg","changeColor","currentPlayer","OtherBird","Tree","addEventListener","keyDownHandler","keyUpHandler","queueNextTurn","gameOver","timeDisplay","clearInterval","loseGame","lostGame","classList","remove","changeGameLost","finalScoreMessage","wonGame","gameInitializer","scorePoint","forEach","shot","framesRemaining","shift","globalAlpha","shotImg","event","includes","keyCode","preventDefault","fireShot","fire","dataset","muted","gunSound","Audio","play","treeCollisions","otherBirdCollisions","duckCollisions","circ1","circ2","largerCirc","detectCollisionCircles","refreshedDucks","duckSound","Game","playerOneScore","playerTwoScore","twoPlayerRun","toggleTurnInitializer","playerOneTurnStart","playerOneStartButton","currentPlayerDisplay","toggle","that","firstPlayerRun","once","secondPlayerRun","playerTwoTurnStart","playerTwoStartButton","playerOneScoreDisplay","playerOneUpdate","scoreDisplay","difficultyDisplay","resetGameAttributes","add","twoPlayerWinMessage","twoPlayerFinalScore","twoPlayerEndGame","playerTwoScoreDisplay","toggleMute","sound","audioImg","querySelector","querySelectorAll","elem","pause","newGame","gameStartButton","singleModeDisplay","versusModeDisplay","turnInitializer","value","mode","window","TwoPlayerGame"],"sourceRoot":""}